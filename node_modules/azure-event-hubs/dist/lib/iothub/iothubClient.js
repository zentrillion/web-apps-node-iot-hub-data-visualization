"use strict";
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const iotHubConnectionConfig_1 = require("./iotHubConnectionConfig");
const connectionContext_1 = require("../connectionContext");
const iotSas_1 = require("./iotSas");
const debugModule = require("debug");
const errors_1 = require("../errors");
const rhea_promise_1 = require("../rhea-promise");
const debug = debugModule("azure:event-hubs:iothubClient");
class IotHubClient {
    constructor(connectionString) {
        this.connectionString = connectionString;
    }
    /**
     * Constructs the EventHub connection string by catching the redirect error and parsing the error
     * information.
     * @param {ConnectionContextOptions} [options] optional parameters to be provided while creating
     * the connection context.
     * @return {Promise<string>} Promise<string>
     */
    getEventHubConnectionString(options) {
        return __awaiter(this, void 0, void 0, function* () {
            const iothubconfig = iotHubConnectionConfig_1.IotHubConnectionConfig.create(this.connectionString);
            const config = iotHubConnectionConfig_1.IotHubConnectionConfig.convertToEventHubConnectionConfig(iothubconfig);
            let result = "";
            if (!options)
                options = {};
            options.tokenProvider = new iotSas_1.IotSasTokenProvider(config.endpoint, config.sharedAccessKeyName, config.sharedAccessKey);
            options.managementSessionAddress = `/messages/events/$management`;
            const context = connectionContext_1.ConnectionContext.create(config, options);
            try {
                debug("Getting the hub runtime info from the iothub connection string to get the redirect error.");
                yield context.managementSession.getHubRuntimeInformation();
            }
            catch (err) {
                const error = errors_1.translate(err);
                debug("IotHubClient received the error: %O", error);
                const parsedInfo = this._parseRedirectError(err);
                debug("Parsed info from redirect error is: %O", parsedInfo);
                result = this._buildConnectionString({
                    sharedAccessKey: config.sharedAccessKey,
                    sharedAccessKeyName: config.sharedAccessKeyName,
                    endpoint: parsedInfo.endpoint,
                    entityPath: parsedInfo.entityPath
                });
            }
            debug("The EventHub ConnectionString is: '%s'.", result);
            yield this.close(context);
            return result;
        });
    }
    /**
     * Closes the AMQP connection to the Event Hub for this client,
     * returning a promise that will be resolved when disconnection is completed.
     * @returns {Promise<any>}
     */
    close(context) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                if (context.connection) {
                    debug("Closing the IotHubClient connection...");
                    // Close the cbs session;
                    yield context.cbsSession.close();
                    debug("IotHub cbs session closed.");
                    // Close the management session
                    yield context.managementSession.close();
                    debug("IotHub management client closed.");
                    yield rhea_promise_1.closeConnection(context.connection);
                    debug("Closed the amqp connection '%s' on the iothub client.", context.connectionId);
                    context.connection = undefined;
                }
            }
            catch (err) {
                const msg = `An error occurred while closing the connection "${context.connectionId}": ${err.stack}`;
                debug(msg);
            }
        });
    }
    _parseRedirectError(error) {
        if (!error) {
            throw new Error("'error' is a required parameter and must be of type 'object'.");
        }
        if (error.name !== "LinkRedirectError" || !error.info) {
            throw error;
        }
        if (!error.info.hostname || !error.info.address) {
            const msg = `The received redirect error from IotHub is malformed. ${error.stack}\n${error.info}`;
            throw new Error(msg);
        }
        const address = error.info.address;
        const parsedResult = address.match(/5671\/(.*)\/\$management/i);
        if (parsedResult == undefined || parsedResult && parsedResult[1] == undefined) {
            const msg = `Cannot parse the EventHub name from the given address: ${address} in the error: ` +
                `${error.stack}\n${JSON.stringify(error.info)}.\nThe parsed result is: ${JSON.stringify(parsedResult)}.`;
            throw new Error(msg);
        }
        return {
            endpoint: error.info.hostname,
            entityPath: parsedResult[1]
        };
    }
    _buildConnectionString(config) {
        const parts = new Map();
        parts.set("Endpoint", `sb://${config.endpoint}/`);
        parts.set("SharedAccessKeyName", config.sharedAccessKeyName);
        parts.set("SharedAccessKey", config.sharedAccessKey);
        parts.set("EntityPath", config.entityPath);
        return Array.from(parts).map((part) => `${part[0]}=${part[1]}`).join(";");
    }
}
exports.IotHubClient = IotHubClient;
//# sourceMappingURL=iothubClient.js.map