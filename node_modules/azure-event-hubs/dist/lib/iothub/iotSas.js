"use strict";
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const sas_1 = require("../auth/sas");
/**
 * @class IotSasTokenProvider
 * Defines the SasTokenProvider for IotHub.
 */
class IotSasTokenProvider extends sas_1.SasTokenProvider {
    /**
     * Gets the sas token for the specified audience for IotHub.
     * @param {string} [audience] - The audience for which the token is desired. If not
     * provided then the Endpoint from the connection string will be applied.
     */
    getToken(audience) {
        return __awaiter(this, void 0, void 0, function* () {
            return this._createToken(Math.floor(Date.now() / 1000) + this.tokenValidTimeInSeconds, audience, Buffer.from(this.key, "base64"));
        });
    }
}
exports.IotSasTokenProvider = IotSasTokenProvider;
//# sourceMappingURL=iotSas.js.map